# -*- coding: utf-8 -*-
"""Behroozi_Introduction to Data Viz Using mtcars Dataset

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ShR3IdRR4fHAOVTewagWLJdeFgfiH4x1

# Data Visualization Using `plotnine`

The Palmer Penguins dataset had a variety of column types with which to explore some nice visualizations. The `mtcars` dataset is another popular dataset for doing some simple data work, but does not contain the same types of variables.

Run the following code to load the `mtcars` dataset and explore the observations and variables contained within. To learn more about this dataset check out [this site](https://stat.ethz.ch/R-manual/R-devel/library/datasets/html/mtcars.html)
"""

import statsmodels.api as sm
import pandas as pd

mtcars = sm.datasets.get_rdataset("mtcars", "datasets", cache=True).data
df = pd.DataFrame(mtcars)

df

"""The statement "the `mtcars` dataset does not contain the same types of variables as the penguins dataset" is a little true and a little false. There are no variables that contain text values, BUT there are variables that it makes sense to consider categorical variables. In most situations, it makes sense to treat the values of categorical variables as text values instead of numeric values.

Use the `astype()` method to convert the categorical variables of the `mtcars` (df) dataset to have text values in the code chunk below. We've done one for you!
"""

df["am"] = df["am"].astype(str)

# Convert the other variables below
df["vs"] = df["vs"].astype(str)

df["cyl"] = df["cyl"].astype(str)

df["gear"] = df["gear"].astype(str)

df["carb"] = df["carb"].astype(str)

print(df)
print(df.dtypes)

"""If you print out your new dataset, is it clear that the variables have been converted to text values? If so, how can you tell?

It does not seem very clear to be that the the variables have been converted to text values. Personally, I would want to double check the variables types to make sure the conversion to string worked.

It should also be clear by how `plotnine` treats these variables.

1. Create side-by-side boxplots of the `mpg` variable by the different values of the `am` variable. What happens if you convert the `am` variable back to float values and then try to create this same plot? Explain the differences between the two plots.

Instead of creating side by side plots, converting the `am` variable to float values makes one large boxplot that ranges on the x-axis from 0 to 1. When the `am` variable is treated as a categorical variable, the values of 0 and 1 for the variable are treated as dichotomous values with two separate distributions of miles per gallon, not a range of values from 0 to 1.

2. Create overlaid histograms of the `hp` variable for the different values of the `cyl` variable. What happens if you convert the `cyl` variable back to float values and then try to create this same plot? Explain the differences between the two plots.

When `cyl` is treated as a categorical variable, the visualization shows multiple histograms of `hp` for each value of `cyl` (4,6,8). If `cyl` is converted back to a float type, the visualization does not include the variable in the visualization.
"""

# Create plot for (1) here - am as categorical variable
from plotnine import ggplot, geom_point, aes, geom_boxplot, geom_histogram
(ggplot(df,
        aes(
            x = "am",
            y = "mpg",
            fill = "am"
        )) +
 geom_boxplot()
 )

# Create plot for (1) here - am as float values
df["am"] = df["am"].astype(float)

(ggplot(df,
        aes(
            x = "am",
            y = "mpg",
            fill = "am"
        )) +
 geom_boxplot()
 )

# Create plot for (2) here - cyl as categorical variable
(ggplot(df,
        aes(
            x = "hp",
            fill = "cyl"
        ))
+ geom_histogram()
)

# Create plot for (2) here - cyl as float variable
df["cyl"] = df["cyl"].astype(float)

(ggplot(df,
        aes(
            x = "hp",
            fill = "cyl"
        ))
+ geom_histogram()
)

"""Some of these variables, like the `cyl` variable, have numeric values that actually make sense as numbers (i.e. the number of cylinders in the engine). However, it doesn't make the most sense to "do math" with this type of variable (e.g. take averages and such) because there are so few different value this can take on AND they're an explicit choice made by the car manufacturer. So, it makes more sense to treat the `cyl` variable as a categorical variable despite it having numeric values.

You will need to keep these kinds of nuances about data in mind as you work with an increasing variety and richness of data, and do more complex things with them.

Choose 3 new `geometries` from the [data-to-viz website](https://www.data-to-viz.com/) for graphs that you'd like to explore using the `mtcars` dataset, and then create those graphs!
"""

# Create plot with first new geometry here - scatter plot of mpg by horsepower
from plotnine import geom_point, labs

(ggplot(df,
    aes(
        x = "hp",
        y = "mpg"
    ))
+ geom_point()
+ labs(x = "Gross Horsepower", y = "Miles per Gallon", title = "Scatter Plot of MPG vs. Gross Horsepower"))

# Create plot with second new geometry here - density plot of hp by am
from plotnine import geom_density

(ggplot(df,
        aes(
            x = "hp",
            fill = "am"
        ))
+ geom_density(alpha = 0.5)
+ labs(title = "Distribution of Gross Horsepower by Transmission"))

# Create plot with third new geometry here - bar plot of am and vs
from plotnine import geom_bar

(ggplot(df,
        aes(
            x = "am",
        ))
+ geom_bar(fill = "cornflowerblue")
+ labs(x = "Transmission (0 = automatic, 1 = manual)",
       title = "Count of Transmission Types"))